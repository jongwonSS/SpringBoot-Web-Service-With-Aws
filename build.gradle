plugins { // (1) 이전 buildscript 선언 방법 변
    id 'org.springframework.boot' version '2.4.1' // RELEASE 삭제
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'       // 스프링 부트의 의존성 관리용 플러그인
    id 'java'
}

/* (1)
buildscript { // 빌드 스크립트 자체를 빌드하는 과정에서 필요한 외부 라이브러리를 클래스패스에 추가하는 메소드
    ext { // 전역변수 선언
        springBootVersion = '2.1.7.RELEASE'
    }
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}
*/

group 'com.song.webservice'
version '1.0.4-SNAPSHOT-'+new Date().format("yyyyMMddHHmmss")
sourceCompatibility = 1.8

repositories {      // 의존성들을 어떤 원격 저장소에서 받을지 정함.
    mavenCentral()
    jcenter()
}

// for Junit 5
test { // (2) Junit5를 사용하기 위해서는 필수로 선언되어야 합니다.
    useJUnitPlatform()
}

dependencies {
    //(3) Gradle 6가 되면서 compile, testCompile은 Soft Deprecate
    //    대신, implementation, testImplementation 추가

    implementation('org.springframework.boot:spring-boot-starter-web')
    implementation('org.springframework.boot:spring-boot-starter-mustache')

    // lombok
    implementation('org.projectlombok:lombok')
    annotationProcessor('org.projectlombok:lombok')
    testImplementation('org.projectlombok:lombok')
    testAnnotationProcessor('org.projectlombok:lombok')

    implementation('org.springframework.boot:spring-boot-starter-data-jpa')
    implementation("org.mariadb.jdbc:mariadb-java-client")
    implementation('com.h2database:h2')

    testImplementation('org.springframework.boot:spring-boot-starter-test')
/*   Spring Security 챕터를 진행시 필요
    implementation('org.springframework.boot:spring-boot-starter-oauth2-client') // 권한 관련
    implementation('org.springframework.session:spring-session-jdbc') // 권한 관련

    testImplementation("org.springframework.security:spring-security-test") // 권한 관련
    */

}